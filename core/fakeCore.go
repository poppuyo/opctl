// This file was generated by counterfeiter
package core

import (
  "sync"
  "github.com/opspec-io/sdk-golang/pkg/model"
)

type FakeCore struct {
  GetEventStreamStub        func(eventChannel chan model.Event) (err error)
  getEventStreamMutex       sync.RWMutex
  getEventStreamArgsForCall []struct {
    eventChannel chan model.Event
  }
  getEventStreamReturns     struct {
                              result1 error
                            }
  KillOpStub                func(req model.KillOpReq) (err error)
  killOpMutex               sync.RWMutex
  killOpArgsForCall         []struct {
    req model.KillOpReq
  }
  killOpReturns             struct {
                              result1 error
                            }
  StartOpStub               func(req model.StartOpReq) (opInstanceId string, err error)
  startOpMutex              sync.RWMutex
  startOpArgsForCall        []struct {
    req model.StartOpReq
  }
  startOpReturns            struct {
                              result1 string
                              result2 error
                            }
  invocations               map[string][][]interface{}
  invocationsMutex          sync.RWMutex
}

func (fake *FakeCore) GetEventStream(eventChannel chan model.Event) (err error) {
  fake.getEventStreamMutex.Lock()
  fake.getEventStreamArgsForCall = append(fake.getEventStreamArgsForCall, struct {
    eventChannel chan model.Event
  }{eventChannel})
  fake.recordInvocation("GetEventStream", []interface{}{eventChannel})
  fake.getEventStreamMutex.Unlock()
  if fake.GetEventStreamStub != nil {
    return fake.GetEventStreamStub(eventChannel)
  } else {
    return fake.getEventStreamReturns.result1
  }
}

func (fake *FakeCore) GetEventStreamCallCount() int {
  fake.getEventStreamMutex.RLock()
  defer fake.getEventStreamMutex.RUnlock()
  return len(fake.getEventStreamArgsForCall)
}

func (fake *FakeCore) GetEventStreamArgsForCall(i int) chan model.Event {
  fake.getEventStreamMutex.RLock()
  defer fake.getEventStreamMutex.RUnlock()
  return fake.getEventStreamArgsForCall[i].eventChannel
}

func (fake *FakeCore) GetEventStreamReturns(result1 error) {
  fake.GetEventStreamStub = nil
  fake.getEventStreamReturns = struct {
    result1 error
  }{result1}
}

func (fake *FakeCore) KillOp(req model.KillOpReq) (err error) {
  fake.killOpMutex.Lock()
  fake.killOpArgsForCall = append(fake.killOpArgsForCall, struct {
    req model.KillOpReq
  }{req})
  fake.recordInvocation("KillOp", []interface{}{req})
  fake.killOpMutex.Unlock()
  if fake.KillOpStub != nil {
    return fake.KillOpStub(req)
  } else {
    return fake.killOpReturns.result1
  }
}

func (fake *FakeCore) KillOpCallCount() int {
  fake.killOpMutex.RLock()
  defer fake.killOpMutex.RUnlock()
  return len(fake.killOpArgsForCall)
}

func (fake *FakeCore) KillOpArgsForCall(i int) model.KillOpReq {
  fake.killOpMutex.RLock()
  defer fake.killOpMutex.RUnlock()
  return fake.killOpArgsForCall[i].req
}

func (fake *FakeCore) KillOpReturns(result1 error) {
  fake.KillOpStub = nil
  fake.killOpReturns = struct {
    result1 error
  }{result1}
}

func (fake *FakeCore) StartOp(req model.StartOpReq) (opInstanceId string, err error) {
  fake.startOpMutex.Lock()
  fake.startOpArgsForCall = append(fake.startOpArgsForCall, struct {
    req model.StartOpReq
  }{req})
  fake.recordInvocation("StartOp", []interface{}{req})
  fake.startOpMutex.Unlock()
  if fake.StartOpStub != nil {
    return fake.StartOpStub(req)
  } else {
    return fake.startOpReturns.result1, fake.startOpReturns.result2
  }
}

func (fake *FakeCore) StartOpCallCount() int {
  fake.startOpMutex.RLock()
  defer fake.startOpMutex.RUnlock()
  return len(fake.startOpArgsForCall)
}

func (fake *FakeCore) StartOpArgsForCall(i int) model.StartOpReq {
  fake.startOpMutex.RLock()
  defer fake.startOpMutex.RUnlock()
  return fake.startOpArgsForCall[i].req
}

func (fake *FakeCore) StartOpReturns(result1 string, result2 error) {
  fake.StartOpStub = nil
  fake.startOpReturns = struct {
    result1 string
    result2 error
  }{result1, result2}
}

func (fake *FakeCore) Invocations() map[string][][]interface{} {
  fake.invocationsMutex.RLock()
  defer fake.invocationsMutex.RUnlock()
  fake.getEventStreamMutex.RLock()
  defer fake.getEventStreamMutex.RUnlock()
  fake.killOpMutex.RLock()
  defer fake.killOpMutex.RUnlock()
  fake.startOpMutex.RLock()
  defer fake.startOpMutex.RUnlock()
  return fake.invocations
}

func (fake *FakeCore) recordInvocation(key string, args []interface{}) {
  fake.invocationsMutex.Lock()
  defer fake.invocationsMutex.Unlock()
  if fake.invocations == nil {
    fake.invocations = map[string][][]interface{}{}
  }
  if fake.invocations[key] == nil {
    fake.invocations[key] = [][]interface{}{}
  }
  fake.invocations[key] = append(fake.invocations[key], args)
}

var _ Core = new(FakeCore)
